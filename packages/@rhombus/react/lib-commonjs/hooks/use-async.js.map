{"version":3,"file":"use-async.js","sourceRoot":"","sources":["../../src/hooks/use-async.ts"],"names":[],"mappings":";;;AACA,iCAAyD;AACzD,mDAAgD;AAEzC,MAAM,QAAQ,GAAG,CAAI,aAA+B,EAAE,IAAW,EAAE,EAAE;IACxE,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,IAAA,gBAAQ,EAAqC,MAAM,CAAC,CAAC;IACjF,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAoB,6BAAa,CAAC,CAAC;IACrE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAA0B,6BAAa,CAAC,CAAC;IAG3E,+CAA+C;IAC/C,uDAAuD;IACvD,wDAAwD;IACxD,sDAAsD;IACtD,MAAM,OAAO,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;QACnC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrB,QAAQ,CAAC,6BAAa,CAAC,CAAC;QACxB,QAAQ,CAAC,6BAAa,CAAC,CAAC;QACxB,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,aAAa,EAAE,CAAC;YACvC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACnB,SAAS,CAAC,SAAS,CAAC,CAAC;SACxB;QAAC,OAAO,KAAK,EAAE;YACZ,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChB,SAAS,CAAC,OAAO,CAAC,CAAC;SACtB;IACL,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,kDAAkD;IAC5D,iDAAiD;IACjD,iDAAiD;IACjD,yBAAyB;IACzB,IAAA,iBAAS,EAAC,GAAG,EAAE;QACX,OAAO,EAAE,CAAC;IACd,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;IACf,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAClC,CAAC,CAAC;AA9BW,QAAA,QAAQ,YA8BnB","sourcesContent":["import { AsyncFunc } from '@rhombus/func';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { VALUE_NOT_SET } from './VALUE_NOT_SET';\r\n\r\nexport const useAsync = <T>(asyncFunction: AsyncFunc<[], T>, deps: any[]) => {\r\n    const [status, setStatus] = useState<'idle'|'pending'|'success'|'error'>('idle');\r\n    const [value, setValue] = useState<T | VALUE_NOT_SET>(VALUE_NOT_SET);\r\n    const [error, setError] = useState<unknown | VALUE_NOT_SET>(VALUE_NOT_SET);\r\n\r\n\r\n    // The execute function wraps asyncFunction and\r\n    // handles setting state for pending, value, and error.\r\n    // useCallback ensures the below useEffect is not called\r\n    // on every render, but only if asyncFunction changes.\r\n    const execute = useCallback(async () => {\r\n        setStatus('pending');\r\n        setValue(VALUE_NOT_SET);\r\n        setError(VALUE_NOT_SET);\r\n        try {\r\n            const response = await asyncFunction();\r\n            setValue(response);\r\n            setStatus('success');\r\n        } catch (error) {\r\n            setError(error);\r\n            setStatus('error');\r\n        }\r\n    }, deps); // eslint-disable-line react-hooks/exhaustive-deps\r\n    // Call execute if we want to fire it right away.\r\n    // Otherwise execute can be called later, such as\r\n    // in an onClick handler.\r\n    useEffect(() => {\r\n        execute();\r\n    }, [execute,]);\r\n    return [status, value, error];\r\n};\r\n"]}