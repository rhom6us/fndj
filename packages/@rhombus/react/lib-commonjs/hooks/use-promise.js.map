{"version":3,"file":"use-promise.js","sourceRoot":"","sources":["../../src/hooks/use-promise.ts"],"names":[],"mappings":";;;AACA,iCAAoF;AAIpF;;GAEG;AACH,SAAgB,UAAU,CAAI,OAAyB,EAAE,IAAgC;IACzF,+EAA+E;IAC/E,iHAAiH;IAC7G,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,IAAA,gBAAQ,GAAK,CAAC;IAC1C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAC1C,IAAA,qBAAa,EAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;IAC9D,wGAAwG;IACxG,iHAAiH;IACjH,MAAM,CAAC,GAAG,IAAA,eAAO,EAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,kDAAkD;IACpF,IAAA,iBAAS,EAAC,GAAG,EAAE;QACX,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACZ,SAAS,CAAC,MAAM,CAAC,CAAC;YAClB,QAAQ,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,kDAAkD;IAE5E,IAAI,KAAK,EAAE;QACP,OAAO,CAAC,IAAI,EAAE,MAAO,CAAC,CAAC;KAC1B;IACD,OAAO,CAAC,KAAK,CAAC,CAAC;AACnB,CAAC;AArBD,gCAqBC","sourcesContent":["import { AsyncFunc } from '@rhombus/func';\r\nimport { DependencyList, useDebugValue, useEffect, useMemo, useState } from 'react';\r\n\r\n\r\n\r\n/**\r\n * @param promise make DAMN sure that the identity of the promise is stable\r\n */\r\nexport function usePromise<T>(factory: AsyncFunc<[], T>, deps: DependencyList | undefined): [false] | [true, T] {\r\n// export function usePromise<T>(promise: PromiseLike<T>): [false] | [true, T];\r\n// export function usePromise<T>(promise: PromiseLike<T> | AsyncFunc<[], T>, deps?: DependencyList | undefined) {\r\n    const [result, setResult] = useState<T>();\r\n    const [ready, setReady] = useState(false);\r\n    useDebugValue(ready, ready => ready ? 'READY' : 'PENDING...');\r\n    // const args = isPromiseLike(promise) ? [() => promise, [promise]] as const : [promise, deps] as const;\r\n    // const p = useMemo<PromiseLike<T>>(...(args as [any, any])); // eslint-disable-line react-hooks/exhaustive-deps\r\n    const p = useMemo(factory, deps); // eslint-disable-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        setReady(false);\r\n        p.then(result => {\r\n            setResult(result);\r\n            setReady(true);\r\n        });\r\n    }, [p, ...(deps ?? [])]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    if (ready) {\r\n        return [true, result!];\r\n    }\r\n    return [false];\r\n}\r\n"]}