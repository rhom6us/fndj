{"version":3,"file":"use-logger.js","sourceRoot":"","sources":["../../src/hooks/use-logger.tsx"],"names":[],"mappings":";;;;AAAA,4CAAiE;AACjE,4DAA8E;AAE9E,MAAM,aAAa,GAAG,eAAK,CAAC,aAAa,CAAkC,IAAA,yBAAgB,GAAE,CAAC,CAAC;AAGxF,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,IAAA,kBAAU,EAAC,aAAa,CAAC,CAAC;AAA5C,QAAA,SAAS,aAAmC;AAGlD,MAAM,cAAc,GAAO,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC/C,MAAM,aAAa,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAC/B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,IAAA,qBAAY,GAAE,CAAC;QACxC,MAAM,EAAE,CAAC;QACT,OAAO,MAAM,CAAC;IAClB,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,UAAU,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,IAAA,yBAAgB,GAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5D,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAC9C,MAAM,MAAM,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,aAAa,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;IACzG,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,CAAC,OAAO,GAAG,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACzF,OAAO,CACH,8BAAC,aAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAA,eAAO,EAAC,GAAE,EAAE,CAAA,CAAC,MAAM,EAAE,aAAa,CAAU,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,IAChG,QAAQ,CACY,CAC5B,CAAC;AACN,CAAC,CAAC;AAfW,QAAA,cAAc,kBAezB","sourcesContent":["import { createLogger, createNoopLogger } from '@rhombus/logger';\r\nimport React, { FC, useCallback, useContext, useMemo, useState } from 'react';\r\n\r\nconst LoggerContext = React.createContext<ReturnType<typeof createLogger>>(createNoopLogger());\r\n\r\n\r\nexport const useLogger = () => useContext(LoggerContext);\r\n\r\n\r\nexport const LoggerProvider: FC = ({ children }) => {\r\n    const defaultLogger = useMemo(() => {\r\n        const [logger, enable] = createLogger();\r\n        enable();\r\n        return logger;\r\n    }, []);\r\n    const noopLogger = useMemo(() => createNoopLogger()[0], []);\r\n    const [enabled, setEnabled] = useState(false);\r\n    const logger = useMemo(() => enabled ? defaultLogger : noopLogger, [defaultLogger, enabled, noopLogger]);\r\n    const enableLogging = useCallback((enabled = true) => setEnabled(enabled), [setEnabled]);\r\n    return (\r\n        <LoggerContext.Provider value={useMemo(()=>[logger, enableLogging] as const, [enableLogging, logger])}>\r\n            {children}\r\n        </LoggerContext.Provider>\r\n    );\r\n};\r\n"]}