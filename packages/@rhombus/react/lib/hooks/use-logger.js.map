{"version":3,"file":"use-logger.js","sourceRoot":"","sources":["../../src/hooks/use-logger.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACjE,OAAO,KAAK,EAAE,EAAM,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE9E,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAkC,gBAAgB,EAAE,CAAC,CAAC;AAG/F,MAAM,CAAC,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AAGzD,MAAM,CAAC,MAAM,cAAc,GAAO,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC/C,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,EAAE;QAC/B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,YAAY,EAAE,CAAC;QACxC,MAAM,EAAE,CAAC;QACT,OAAO,MAAM,CAAC;IAClB,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5D,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,aAAa,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;IACzG,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,OAAO,GAAG,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACzF,OAAO,CACH,oBAAC,aAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,OAAO,CAAC,GAAE,EAAE,CAAA,CAAC,MAAM,EAAE,aAAa,CAAU,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,IAChG,QAAQ,CACY,CAC5B,CAAC;AACN,CAAC,CAAC","sourcesContent":["import { createLogger, createNoopLogger } from '@rhombus/logger';\nimport React, { FC, useCallback, useContext, useMemo, useState } from 'react';\n\nconst LoggerContext = React.createContext<ReturnType<typeof createLogger>>(createNoopLogger());\n\n\nexport const useLogger = () => useContext(LoggerContext);\n\n\nexport const LoggerProvider: FC = ({ children }) => {\n    const defaultLogger = useMemo(() => {\n        const [logger, enable] = createLogger();\n        enable();\n        return logger;\n    }, []);\n    const noopLogger = useMemo(() => createNoopLogger()[0], []);\n    const [enabled, setEnabled] = useState(false);\n    const logger = useMemo(() => enabled ? defaultLogger : noopLogger, [defaultLogger, enabled, noopLogger]);\n    const enableLogging = useCallback((enabled = true) => setEnabled(enabled), [setEnabled]);\n    return (\n        <LoggerContext.Provider value={useMemo(()=>[logger, enableLogging] as const, [enableLogging, logger])}>\n            {children}\n        </LoggerContext.Provider>\n    );\n};\n"]}