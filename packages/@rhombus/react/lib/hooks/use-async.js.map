{"version":3,"file":"use-async.js","sourceRoot":"","sources":["../../src/hooks/use-async.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAI,aAA+B,EAAE,IAAW,EAAE,EAAE;IACxE,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAqC,MAAM,CAAC,CAAC;IACjF,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAoB,aAAa,CAAC,CAAC;IACrE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAA0B,aAAa,CAAC,CAAC;IAG3E,+CAA+C;IAC/C,uDAAuD;IACvD,wDAAwD;IACxD,sDAAsD;IACtD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;QACnC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrB,QAAQ,CAAC,aAAa,CAAC,CAAC;QACxB,QAAQ,CAAC,aAAa,CAAC,CAAC;QACxB,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,aAAa,EAAE,CAAC;YACvC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACnB,SAAS,CAAC,SAAS,CAAC,CAAC;SACxB;QAAC,OAAO,KAAK,EAAE;YACZ,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChB,SAAS,CAAC,OAAO,CAAC,CAAC;SACtB;IACL,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,kDAAkD;IAC5D,iDAAiD;IACjD,iDAAiD;IACjD,yBAAyB;IACzB,SAAS,CAAC,GAAG,EAAE;QACX,OAAO,EAAE,CAAC;IACd,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;IACf,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAClC,CAAC,CAAC","sourcesContent":["import { AsyncFunc } from '@rhombus/func';\nimport { useCallback, useEffect, useState } from 'react';\nimport { VALUE_NOT_SET } from './VALUE_NOT_SET';\n\nexport const useAsync = <T>(asyncFunction: AsyncFunc<[], T>, deps: any[]) => {\n    const [status, setStatus] = useState<'idle'|'pending'|'success'|'error'>('idle');\n    const [value, setValue] = useState<T | VALUE_NOT_SET>(VALUE_NOT_SET);\n    const [error, setError] = useState<unknown | VALUE_NOT_SET>(VALUE_NOT_SET);\n\n\n    // The execute function wraps asyncFunction and\n    // handles setting state for pending, value, and error.\n    // useCallback ensures the below useEffect is not called\n    // on every render, but only if asyncFunction changes.\n    const execute = useCallback(async () => {\n        setStatus('pending');\n        setValue(VALUE_NOT_SET);\n        setError(VALUE_NOT_SET);\n        try {\n            const response = await asyncFunction();\n            setValue(response);\n            setStatus('success');\n        } catch (error) {\n            setError(error);\n            setStatus('error');\n        }\n    }, deps); // eslint-disable-line react-hooks/exhaustive-deps\n    // Call execute if we want to fire it right away.\n    // Otherwise execute can be called later, such as\n    // in an onClick handler.\n    useEffect(() => {\n        execute();\n    }, [execute,]);\n    return [status, value, error];\n};\n"]}