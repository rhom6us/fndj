{"version":3,"file":"LogoutButton.js","sourceRoot":"","sources":["../src/LogoutButton.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAc,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAGhE,MAAM,UAAU,YAAY,CAAC,KAAyH;IAElJ,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEpF,IAAI,CAAC,KAAK,EAAE;QACR,OAAO,yCAAK,CAAC;KAChB;IACD,OAAO,oBAAC,qBAAqB,OAAK,KAAK,EAAE,KAAK,EAAE,KAAM,GAAI,CAAC;AAC/D,CAAC;AAGD,SAAS,qBAAqB,CAAC,EAAE,KAAK,EAAE,GAAG,KAAK,EAAsH;IAClK,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;IACrE,SAAS,CAAC,GAAG,EAAE;QACX,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;QACtC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACZ,MAAM,EAAE,GAAG,WAAW,CAAC,CAAC,CAA6D,EAAE,EAAE;QACrF,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE;YACzB,KAAK,CAAC,OAAO,EAAE,CAAC;SACnB;IACL,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAEnB,IAAI,CAAC,UAAU,EAAE;QAEb,OAAO,yCAAK,CAAC;KAChB;IAED,OAAO,gCAAQ,IAAI,EAAC,QAAQ,KAAK,KAAK,EAAE,OAAO,EAAE,EAAE,aAAkB,CAAC;AAC1E,CAAC","sourcesContent":["import { getAuth2, GoogleAuth } from '@rhombus/gapi';\nimport { usePromise } from '@rhombus/react';\nimport React, { useCallback, useEffect, useState } from 'react';\n\n\nexport function LogoutButton(props: { clientId?: string; } & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>) {\n\n    const [ready, auth2] = usePromise(() => getAuth2(props.clientId), [props.clientId]);\n\n    if (!ready) {\n        return <></>;\n    }\n    return <LogoutButton_Internal {...props} auth2={auth2!} />;\n}\n\n\nfunction LogoutButton_Internal({ auth2, ...props }: { auth2: GoogleAuth; } & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>) {\n    const [isLoggedIn, setIsLoggedIn] = useState(auth2.isSignedIn.get());\n    useEffect(() => {\n        setIsLoggedIn(auth2.isSignedIn.get());\n        auth2.isSignedIn.listen(setIsLoggedIn);\n    }, [auth2]);\n    const cb = useCallback((e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => {\n        props.onClick?.(e);\n        if (!e.isDefaultPrevented()) {\n            auth2.signOut();\n        }\n    }, [auth2, props]);\n\n    if (!isLoggedIn) {\n\n        return <></>;\n    }\n\n    return <button type=\"button\" {...props} onClick={cb} >Logout</button>;\n}\n"]}