{"version":3,"file":"array.js","sourceRoot":"","sources":["../src/array.ts"],"names":[],"mappings":"AAcA;;GAEG,CAAA,CAAC","sourcesContent":["import { Cast } from './cast';\n\n/**\n * the first element\n */\nexport type Head<T extends any[]> =\n    T extends [infer R, ...any] ? R : never;\n\n/**\n * all but the first element\n */\nexport type Tail<T extends any[]> =\n    T extends [any, ...infer R] ? R : never;\n\n/**\n * all but the last element\n */;\nexport type Body<T extends any[]> =\n    T extends [...infer R, any] ? R : never;\n/**\n * the last element\n */\nexport type Last<T extends any[]> =\n    T extends [...any, infer R] ? R : never;\n\n\n/**\n * the length of the list\n */\nexport type Length<T extends any[]> = Cast<T['length'], number>;\n\n\n/**\n * Moves Values from the front of the right away to the end of the left.\n *\n * ShiftLeft<[0,1,2],[3,4,5,6],2> => [[0,1,2,3,4],[5,6]]]\n */\ntype ShiftLeft<left extends any[], right extends any[], count extends number> =\n    Length<left> extends count ? [left, right] :\n    right extends [] ? [left, right] :\n    ShiftLeft<[...left, Head<right>], Tail<right>, count>;\n\n\n\n\n/**\n * SplitArray<[0,1,2,3,4,5,6,7,8], 3> => [[0,1,2],[3,4,5,6,7,8]]\n */\nexport type SplitArray<array extends any[], count extends number> =\n    ShiftLeft<[], array, count>;\n\n\n/**\n * Slice<[0,1,2,3,4,5,6,7,8], 2, 3> => [2,3,4]\n */\nexport type Slice<array extends any[], start extends number = 0, length extends number = Length<array>> =\n    Take<length, Skip<start, array>>;\n\n/**\n * Take<2, [0,1,2,3,4]> => [0,1]\n */\nexport type Take<N extends number, T extends any[]> =\n    Cast<SplitArray<T, N>[0], T>;\n\n/**\n * Skip<2, [0,1,2,3,4]> => [2,3,4]\n */\nexport type Skip<N extends number, T extends any[]> =\n    Cast<SplitArray<T, N>[1], T>;\n\n/**\n * PartialList<[0,1,2,3]> => [0,1,2,3] | [0,1,2] | [0,1] | [0] | []\n */\nexport type PartialList<T extends any[]> = T | (\n    T extends [...infer R, any] ? PartialList<R> : []\n);\n"]}