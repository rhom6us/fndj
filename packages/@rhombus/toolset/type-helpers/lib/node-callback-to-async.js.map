{"version":3,"file":"node-callback-to-async.js","sourceRoot":"","sources":["../src/node-callback-to-async.ts"],"names":[],"mappings":"AASA,MAAM,UAAU,mBAAmB,CAAwB,EAAK;IAC5D,OAAO,CAAC,GAAG,IAAkB,EAAE,EAAE,CAAC,IAAI,OAAO,CAAiB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9E,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAQ,EAAE,MAAW,EAAE,EAAE;YAClC,IAAI,GAAG,KAAK,SAAS,EAAE;gBACnB,MAAM,CAAC,GAAG,CAAC,CAAC;aACf;iBAAM;gBACH,OAAO,CAAC,MAAM,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { Action } from '@rhombus/func';\n\n\ntype InferArgs<F extends NodeStyleFn> = F extends NodeStyleFn<infer args, any> ? args : never;\ntype InferResult<F extends NodeStyleFn> = F extends NodeStyleFn<any, infer result> ? result : never;\n\ntype Callback<TResult = any, TError = any> = Action<[error: TError, result: TResult]>;\ntype NodeStyleFn<Args extends any[] = any[], TResult = any> = Action<[...args: Args, callback: Callback<TResult>]>;\n\nexport function nodeCallbackToAsync<T extends NodeStyleFn>(fn: T) {\n    return (...args: InferArgs<T>) => new Promise<InferResult<T>>((resolve, reject) => {\n        fn(...args, (err: any, result: any) => {\n            if (err !== undefined) {\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n}\n"]}