{"version":3,"file":"tuple.js","sourceRoot":"","sources":["../src/tuple.ts"],"names":[],"mappings":"AAEA,gVAAgV;AAChV,6EAA6E;AAC7E,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,2BAA2B;AAC3B,8EAA8E;AAE9E,yHAAyH;AACzH,qCAAqC;AACrC,uCAAuC;AACvC,2CAA2C;AAC3C,+CAA+C;AAC/C,mDAAmD;AACnD,uDAAuD;AACvD,2DAA2D;AAC3D,+DAA+D;AAC/D,mEAAmE;AACnE,mDAAmD;AACnD,wCAAwC;AACxC,qCAAqC;AACrC,+CAA+C;AAC/C,6DAA6D;AAC7D,2EAA2E;AAC3E,uGAAuG;AACvG,qHAAqH;AACrH,mIAAmI;AACnI,iJAAiJ;AACjJ,+JAA+J;AAC/J,6KAA6K;AAC7K,+BAA+B;AAC/B,UAAU;AAEV,4CAA4C;AAC5C,2BAA2B;AAC3B,uCAAuC;AACvC,qDAAqD;AACrD,mEAAmE;AACnE,+FAA+F;AAC/F,6GAA6G;AAC7G,2HAA2H;AAC3H,yIAAyI;AACzI,uJAAuJ;AACvJ,0BAA0B;AAC1B,UAAU;AAEV,wEAAwE;AACxE,6EAA6E;AAC7E,sEAAsE;AACtE,2CAA2C;AAC3C,8BAA8B;AAC9B,qCAAqC;AACrC,gCAAgC;AAChC,QAAQ;AACR,MAAM;AACN,6BAA6B;AAC7B,2BAA2B;AAC3B,oEAAoE;AACpE,SAAS;AACT,MAAM;AACN,kBAAkB;AAClB,KAAK;AACL,+KAA+K;AAE/K,MAAM,UAAU,KAAK,CAAsB,GAAG,IAAW;IACvD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["\n\n// export type LegitTuple = [] | [any] | [any, any] | [any, any, any] | [any, any, any, any] | [any, any, any, any, any] | [any, any, any, any, any, any] | [any, any, any, any, any, any, any] | [any, any, any, any, any, any, any, any] | [any, any, any, any, any, any, any, any, any] | [any, any, any, any, any, any, any, any, any, any];\n// export type Tuple<T1 = void, T2 = void, T3 = void, T4 = void, T5 = void> =\n//   T5 extends void ?\n//   T4 extends void ?\n//   T3 extends void ?\n//   T2 extends void ?\n//   T1 extends void ? [] :\n//   [T1] : [T1, T2] : [T1, T2, T3] : [T1, T2, T3, T4] : [T1, T2, T3, T4, T5];\n\n// export type Tuple<T1 = void, T2 = void, T3 = void, T4 = void, T5 = void, T6 = void, T7 = void, T8 = void, T9 = void> =\n//   T1 extends void ? readonly  [] :\n//   T2 extends void ? readonly  [T1] :\n//   T3 extends void ? readonly  [T1, T2] :\n//   T4 extends void ? readonly  [T1, T2, T3] :\n//   T9 extends void ? readonly  [T1, T2, T3, T4] :\n//   T9 extends void ? readonly  [T1, T2, T3, T4, T5] :\n//   T9 extends void ? readonly  [T1, T2, T3, T4, T5, T6] :\n//   T9 extends void ? readonly  [T1, T2, T3, T4, T5, T6, T7] :\n//   T9 extends void ? readonly  [T1, T2, T3, T4, T5, T6, T7, T8] :\n//   readonly [T1, T2, T3, T4, T5, T6, T7, T8, T9];\n// export type TupleX<T extends any[]> =\n//   T extends LegitTuple & [] ? [] :\n//   T extends LegitTuple & [infer T0] ? [T0] :\n//   T extends LegitTuple & [infer T0, infer T1] ? [T0, T1] :\n//   T extends LegitTuple & [infer T0, infer T1, infer T2] ? [T0, T1, T2] :\n//   T extends LegitTuple & [infer T0, infer T1, infer T2, infer T3, infer T4] ? [T0, T1, T2, T3, T4] :\n//   T extends LegitTuple & [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5] ? [T0, T1, T2, T3, T4, T5] :\n//   T extends LegitTuple & [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5, infer T6] ? [T0, T1, T2, T3, T4, T5, T6] :\n//   T extends LegitTuple & [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5, infer T6, infer T7] ? [T0, T1, T2, T3, T4, T5, T6, T7] :\n//   T extends LegitTuple & [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5, infer T6, infer T7, infer T8] ? [T0, T1, T2, T3, T4, T5, T6, T7, T8] :\n//   T extends LegitTuple & [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5, infer T6, infer T7, infer T8, infer T9] ? [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9] :\n//   T extends LegitTuple ? T :\n//   void;\n\n// export type InferTuple<T extends any[]> =\n//   T extends [] ? Tuple :\n//   T extends [infer T0] ? Tuple<T0> :\n//   T extends [infer T0, infer T1] ? Tuple<T0, T1> :\n//   T extends [infer T0, infer T1, infer T2] ? Tuple<T0, T1, T2> :\n//   T extends [infer T0, infer T1, infer T2, infer T3, infer T4] ? Tuple<T0, T1, T2, T3, T4> :\n//   T extends [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5] ? Tuple<T0, T1, T2, T3, T4, T5> :\n//   T extends [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5, infer T6] ? Tuple<T0, T1, T2, T3, T4, T5, T6> :\n//   T extends [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5, infer T6, infer T7] ? Tuple<T0, T1, T2, T3, T4, T5, T6, T7> :\n//   T extends [infer T0, infer T1, infer T2, infer T3, infer T4, infer T5, infer T6, infer T7, infer T8] ? Tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> :\n//   T extends any[] ? T :\n//   void;\n\n// export function tuple<T extends any[]>(legitTuple: T): InferTuple<T>;\n// export function tuple<T extends [any[]]>(legitTuple: T): InferTuple<T[0]>;\n// export function tuple<T extends any[]>(...items: T): InferTuple<T>;\n// export function tuple(...items: any[]) {\n//   if (items.length === 1) {\n//     if (Array.isArray(items[0])) {\n//       return tuple(items[0]);\n//     }\n//   }\n//   if (items.length > 10) {\n//     throw new TypeError(\n//       \"tuple util function only supports tuple length of up to 9\"\n//     );\n//   }\n//   return items;\n// };\n// export function tuple<T1 = void, T2 = void, T3 = void, T4 = void, T5 = void, T6 = void, T7 = void, T8 = void, T9 = void>(...args:Tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>){\n\nexport function tuple<TArgs extends any[]>(...args: TArgs): Readonly<TArgs> {//InferTuple<TArgs>;\n  return args;\n}\n"]}