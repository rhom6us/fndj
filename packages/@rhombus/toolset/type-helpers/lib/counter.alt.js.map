{"version":3,"file":"counter.alt.js","sourceRoot":"","sources":["../src/counter.alt.ts"],"names":[],"mappings":"","sourcesContent":["import { Length, Skip, Tail } from './array';\nimport { Cast } from './cast';\n\n\ntype CounterArray = never[];\ntype Next<I extends CounterArray> = [never, ...I];\n\n\ntype Prev<I extends CounterArray> = Tail<I>;\n\ntype ExpandArrayToLength<counter extends CounterArray, length extends number> =\n    Length<counter> extends length ? counter :\n    ExpandArrayToLength<[never, ...counter], length>;\n\n// type _Counter<length extends number, counter extends CounterArray = []> =\n//     Length<counter> extends length ? counter :\n//     _Counter<length, Next<counter>>;\n\ntype _Counter<length extends number> =\n    length extends 0 ? [] :\n    length extends 1 ? [never] :\n    ExpandArrayToLength<[], length>;\ntype Counter<length extends number> = Cast<_Counter<length>, CounterArray>;\n\nexport type Store<value extends number> = Counter<value>;\nexport type Inc<N extends number> = Length<Next<Counter<N>>>;\nexport type Dec<N extends number> = Length<Prev<Counter<N>>>;\n\nexport type Add<X extends number, Y extends number> =\n    Length<[...Counter<X>, ...Counter<Y>]>;\n\nexport type Subtract<X extends number, Y extends number> =\n    Length<Skip<Y, Counter<X>>>;\n"]}