{"version":3,"file":"counter.alt.js","sourceRoot":"","sources":["../src/counter.alt.ts"],"names":[],"mappings":"","sourcesContent":["import { Length, Skip, Tail } from './array';\r\nimport { Cast } from './cast';\r\n\r\n\r\ntype CounterArray = never[];\r\ntype Next<I extends CounterArray> = [never, ...I];\r\n\r\n\r\ntype Prev<I extends CounterArray> = Tail<I>;\r\n\r\ntype ExpandArrayToLength<counter extends CounterArray, length extends number> =\r\n    Length<counter> extends length ? counter :\r\n    ExpandArrayToLength<[never, ...counter], length>;\r\n\r\n// type _Counter<length extends number, counter extends CounterArray = []> =\r\n//     Length<counter> extends length ? counter :\r\n//     _Counter<length, Next<counter>>;\r\n\r\ntype _Counter<length extends number> =\r\n    length extends 0 ? [] :\r\n    length extends 1 ? [never] :\r\n    ExpandArrayToLength<[], length>;\r\ntype Counter<length extends number> = Cast<_Counter<length>, CounterArray>;\r\n\r\nexport type Store<value extends number> = Counter<value>;\r\nexport type Inc<N extends number> = Length<Next<Counter<N>>>;\r\nexport type Dec<N extends number> = Length<Prev<Counter<N>>>;\r\n\r\nexport type Add<X extends number, Y extends number> =\r\n    Length<[...Counter<X>, ...Counter<Y>]>;\r\n\r\nexport type Subtract<X extends number, Y extends number> =\r\n    Length<Skip<Y, Counter<X>>>;\r\n"]}