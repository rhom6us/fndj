{"version":3,"file":"curry.js","sourceRoot":"","sources":["../src/curry.ts"],"names":[],"mappings":"AAUA,2DAA2D;AAC3D,IAAU,CAAC,CAEV;AAFD,WAAU,CAAC;IACM,IAAE,GAAkB,MAAM,CAAC,IAAI,CAAC,CAAC;AAClD,CAAC,EAFS,CAAC,KAAD,CAAC,QAEV;AAAA,CAAC;AA4BF,SAAS,MAAM,CAAC,EAAyB,EAAE,GAAG,IAAS;IACnD,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE;QACzB,OAAO,CAAC,GAAG,OAAY,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC;KAC/D;IACD,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;AACvB,CAAC;AAED,SAAS,OAAO,CAAkC,CAAI;IAClD,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACf,OAAO,CAAC,EAAE,CAAC;KACd;IACD,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,OAAO,SAAS,IAAI,CAAC,GAAG,IAAS;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;SACjC;QACD,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC;QAExB,IAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE;YACrB,OAAO,IAAI,CAAC;SACf;QACD,OAAO,CAAC,SAAS,WAAW;YACxB,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5C,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACf,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;aACtB;YACD,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,OAAO,SAAS,QAAQ,CAAC,GAAG,IAAS;gBACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;iBACjC;gBACD,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC;gBAExB,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE;oBACzB,OAAO,QAAQ,CAAC;iBACnB;gBAED,OAAO,KAAK,CAAC,MAAM,EAAE;oBACjB,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;iBAChD;gBAED,OAAO,WAAW,EAAE,CAAC;YAEzB,CAAC,CAAC;QACN,CAAC,EAAE,CAAC,CAAC;IAGT,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,KAAK,CAAoC,EAAO;IAC5D,OAAO,MAAM,CAAC,EAAE,CAAC,CAAC;AACtB,CAAC;AACD,SAAS,IAAI,CAAC,CAAS,EAAE,CAAO,EAAE,CAAO;IACrC,OAAO,EAAE,CAAC;AACd,CAAC;AAED,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;AAE1B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAA,0BAA0B","sourcesContent":["import { Length, PartialList, Skip } from './array';\nimport { Inc } from './counter';\n\ntype _CurryBasic<TArgs extends any[], TReturn> =\n    <T extends PartialList<TArgs>>(...args: T) =>\n        Skip<Length<T>, TArgs> extends [] ? TReturn : _CurryBasic<Skip<Length<T>, TArgs>, TReturn>;\n\ntype CurryBasic<TFn extends (...args: any) => any> = _CurryBasic<Parameters<TFn>, ReturnType<TFn>>;\n\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace R {\n    export const __: unique symbol = Symbol('__');\n};\ntype __ = typeof R.__;\n\n\n\n\n\ntype GapOf<TProvided extends any[], TTarget extends any[], TGapped extends any[], i extends number> =\n    TProvided[i] extends __\n    ? [...TGapped, TTarget[i]]\n    : TGapped;\ntype GapsOf<TProvided extends any[], TTarget extends any[], TGapped extends any[] = [], i extends number = 0> =\n    i extends Length<TProvided>\n    ? [...TGapped, ...Skip<i, TTarget>]\n    : GapsOf<TProvided, TTarget, GapOf<TProvided, TTarget, TGapped, i>, Inc<i>>;\n\ntype PartialGaps<T extends any[]> =\n    T extends [infer X, ...infer Y] ? [X | __, ...PartialGaps<Y>] : [];\ntype Gaps<T extends any[]> = PartialList<PartialGaps<T>>;\ntype _CurryWithGaps<TArgs extends any[], TReturn> =\n    <T extends Gaps<TArgs>>(...args: T) =>\n        GapsOf<T, TArgs> extends [any, ...any[]]\n        ? _CurryWithGaps<GapsOf<T, TArgs>, TReturn>\n        : TReturn;\ntype CurryWithGaps<F extends ((...args: any) => any)> = _CurryWithGaps<Parameters<F>, ReturnType<F>>;\n\nexport type Curry<T extends ((...args: any) => any)> = CurryWithGaps<T>;\n\nfunction _curry(fn: (...args: any) => any, ...args: any): any {\n    if (args.length < fn.length) {\n        return (...subargs: any) => _curry(fn, ...args, ...subargs);\n    }\n    return fn(...args);\n}\n\nfunction _curry2<F extends (...args: any) => any>(f: F): any/*Curry<F>*/ {\n    const _args = Array(f.length).fill(R.__);\n    if (!_args.length) {\n        return f();\n    }\n    let argIndex = 0;\n    return function doit(...args: any) {\n        for (let i = 0; i < args.length; i++) {\n            _args[argIndex + i] = args[i];\n        }\n        argIndex += args.length;\n\n        if (argIndex < f.length) {\n            return doit;\n        }\n        return (function tryFillGaps() {\n            const _gaps = _args.filter(p => p === R.__);\n            if (!_gaps.length) {\n                return f(..._args);\n            }\n            let gapIndex = 0;\n            return function fillGaps(...gaps: any) {\n                for (let i = 0; i < gaps.length; i++) {\n                    _gaps[gapIndex + i] = gaps[i];\n                }\n                gapIndex += gaps.length;\n\n                if (gapIndex < _gaps.length) {\n                    return fillGaps;\n                }\n\n                while (_gaps.length) {\n                    _args[_args.lastIndexOf(R.__)] = _gaps.pop();\n                }\n\n                return tryFillGaps();\n\n            };\n        }());\n\n\n    };\n}\n\nexport function curry<TFn extends (...args: any) => any>(fn: TFn): Curry<TFn> {\n    return _curry(fn);\n}\nfunction test(a: \"asdf\", b: true, c: Date) {\n    return 44;\n}\n\nconst testc = curry(test);\n\nconst testr = testc('asdf', true);//(\"asdf\");//(new Date());\n"]}