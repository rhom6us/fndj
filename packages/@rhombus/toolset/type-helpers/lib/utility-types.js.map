{"version":3,"file":"utility-types.js","sourceRoot":"","sources":["../src/utility-types.ts"],"names":[],"mappings":"","sourcesContent":["\r\nexport type Simplify<T> = { [KeyType in keyof T]: T[KeyType] };\r\n\r\nexport type Except<ObjectType, KeysType extends keyof ObjectType> = Pick<ObjectType, Exclude<keyof ObjectType, KeysType>>;\r\nexport type Mutable<BaseType, Keys extends keyof BaseType = keyof BaseType> =\r\n    Simplify<\r\n        // Pick just the keys that are not mutable from the base type.\r\n        Except<BaseType, Keys> &\r\n        // Pick the keys that should be mutable from the base type and make them mutable by removing the `readonly` modifier from the key.\r\n        { -readonly [KeyType in keyof Pick<BaseType, Keys>]: Pick<BaseType, Keys>[KeyType] }\r\n    >;\r\nexport type IfEquals<X, Y, A, B = never> =\r\n    (<T>() => T extends X ? 1 : 2) extends\r\n    (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\r\n// Alternatively:\r\n/*\r\ntype IfEquals<X, Y, A, B> =\r\n    [2] & [0, 1, X] extends [2] & [0, 1, Y] & [0, infer W, unknown]\r\n    ? W extends 1 ? B : A\r\n    : B;\r\n*/\r\n\r\nexport type WritableKeys<T> = {\r\n    [K in keyof T]: IfEquals<{ [Q in K]: T[K] }, { -readonly [Q in K]: T[K] }, K>\r\n}[keyof T];\r\n\r\nexport type ReadonlyKeys<T> = {\r\n    [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>\r\n}[keyof T];\r\nexport type WritablePart<T> = Pick<T, WritableKeys<T>>;\r\nexport type MakeRequired<T, R extends keyof T> = Simplify<Partial<T> & Required<Pick<T, R>>>;\r\n"]}