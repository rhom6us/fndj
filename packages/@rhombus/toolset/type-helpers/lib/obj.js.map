{"version":3,"file":"obj.js","sourceRoot":"","sources":["../src/obj.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,IAAI,CAAI,GAAM;IAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAQ,CAAC;AACnC,CAAC;AAKD,MAAM,UAAU,OAAO,CAAI,GAAM;IAC7B,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAQ,CAAC;AACtC,CAAC;AAGD,MAAM,UAAU,MAAM,CAAI,GAAM;IAC5B,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC;AAMD,MAAM,UAAU,WAAW,CAA4C,OAAgB;IACnF,OAAO,MAAM,CAAC,WAAW,CAAC,OAAO,CAAQ,CAAC;AAC9C,CAAC;AASD,wDAAwD;AACxD,MAAM,UAAU,MAAM,CAAoC,MAAS,EAAE,GAAG,OAAU;IAC9E,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,UAAU,CAAqC,MAAS,EAAE,KAAQ;IAC9E,IAAI,CAAC,CAAC,MAAM,YAAY,MAAM,CAAC,EAAE;QAC/B,MAAM,IAAI,UAAU,CAAC,8DAA8D,CAAC,CAAC;KACtF;IACD,IAAI,OAAO,GAAQ,MAAM,CAAC;IAC1B,OAAO,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,WAAW,IAAI,OAAO,CAAC,cAAc,CAAC,OAAO,CAAE,CAAC,WAAW,KAAK,MAAM,EAAE;QAC9G,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,OAAO,CAAE,CAAC;KAC5C;IACD,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACtC,CAAC","sourcesContent":["\r\nexport type keys<T> = keyof T;\r\nexport function keys<T>(obj: T): keys<T>[] {\r\n    return Object.keys(obj) as any;\r\n}\r\n\r\nexport type entries<T> = {\r\n    [K in keyof T]: [K, T[K]]\r\n}[keyof T]\r\nexport function entries<T>(obj: T): entries<T>[]{\r\n    return Object.entries(obj) as any;\r\n}\r\n\r\nexport type values<T> = T[keyof T];\r\nexport function values<T>(obj: T): values<T>[] {\r\n    return Object.values(obj);\r\n}\r\n\r\n\r\nexport type fromEntries<TUnion extends readonly [PropertyKey, any]> = {\r\n    [Entry in TUnion as Entry[0]]: Entry[1]\r\n}\r\nexport function fromEntries<TPair extends readonly [PropertyKey, any]>(entries: TPair[]): fromEntries<TPair> {\r\n    return Object.fromEntries(entries) as any;\r\n}\r\n\r\ntype MergeTarget<Target, Source> =\r\n    Source extends Partial<Target> ? Target : Target & Source;\r\ntype CompileArray<Target, Sources extends any[]> =\r\n    Sources extends [...infer Rest, infer Source] ? CompileArray<MergeTarget<Target, Source>, Rest> :\r\n    Sources extends [infer Source] ? MergeTarget<Target, Source> :\r\n    Sources extends [] ? Target :\r\n    Target;\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function assign<T extends object, A extends any[]>(target: T, ...sources: A): CompileArray<T, A> {\r\n    return Object.assign(target, ...sources);\r\n}\r\n\r\nexport function assignDeep<A extends object, B extends object>(target: A, stuff: B): A & B {\r\n    if (!(target instanceof Object)) {\r\n      throw new RangeError('this function only useful on things with an Object prototype');\r\n    }\r\n    let current: any = target;\r\n    while (Reflect.getPrototypeOf(current)?.constructor && Reflect.getPrototypeOf(current)!.constructor !== Object) {\r\n      current = Reflect.getPrototypeOf(current)!;\r\n    }\r\n    Reflect.setPrototypeOf(current, Reflect.getPrototypeOf(stuff));\r\n    return Object.assign(target, stuff);\r\n  }\r\n"]}