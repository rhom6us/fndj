{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,CAAC;AAEtB,MAAM,CAAC,GAAG,UAAiB,CAAC;AAE5B;;;;;;;;;;;;;;GAcG;AACH,MAAM,EAAE,GAAgF,CAAC,CAAC,YAAY,CAAC;AAEvG;;;;GAIG;AAEH,MAAM,EAAE,GAA6B,CAAC,CAAC,cAAc,CAAC;AAEtD,IAAI;IACA,OAAO,CAAC,CAAC,YAAY,CAAC;IACtB,OAAO,CAAC,CAAC,cAAc,CAAC;CAC3B;AACD,OAAO,EAAE,EAAE,GAAG,CAAC,+BAA+B;AAG9C,OAAO,EAAE,EAAE,IAAI,YAAY,EAAE,EAAE,IAAI,cAAc,EAAE,CAAC;AACpD,eAAe,EAAE,CAAC","sourcesContent":["import 'setimmediate';\n\nconst w = globalThis as any;\n\n/**\n * Schedules a macrotask to run after the current events have been processed.\n *\n * Unlike microtasks (scheduled using the Node 0.10+ `process.nextTick` API),\n * where scheduling additional microtasks inside a microtask will cause them\n * to be run inside the same microtask checkpoint, any macrotasks scheduled\n * inside a macrotask will not be executed until the next iteration\n * of the event loop.\n *\n * @param callback The macrotask to schedule.\n * @param args The arguments to pass to the macrotask callback.\n *\n * @return The ID of the macrotask, which can be used to abort\n *         the macrotask with `clearImmediate`.\n */\nconst si: <T extends unknown[]>(callback: (...args: T) => void, ...args: T) => number = w.setImmediate;\n\n/**\n * Aborts the specified macrotask before it's run.\n *\n * @param handle The ID of the macrotask to remove from the macrotask queue.\n */\n\nconst ci: (handle: number) => void = w.clearImmediate;\n\ntry {\n    delete w.setImmediate;\n    delete w.clearImmediate;\n}\ncatch (er) { } // eslint-disable-line no-empty\n\n\nexport { si as setImmediate, ci as clearImmediate };\nexport default si;\n"]}