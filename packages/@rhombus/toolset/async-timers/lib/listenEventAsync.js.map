{"version":3,"file":"listenEventAsync.js","sourceRoot":"","sources":["../src/listenEventAsync.ts"],"names":[],"mappings":"AAOA,MAAM,UAAU,gBAAgB,CAAwE,MAAS,EAAE,IAAO,EAAE,UAA2D,EAAE;IACrL,OAAO,IAAI,OAAO,CAAuB,OAAO,CAAC,EAAE;QAC/C,MAAM,IAAI,GAAG,OAAO,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;QAC3E,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAQ,CAAC,EAAE,EAAE,GAAG,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { Func } from '@rhombus/func';\n\ntype NotNull<T> = Exclude<T, null>;\ntype Cast<T, R> = T extends R ? T : R;\nexport type InferEventType<T extends EventTarget, N extends string> = Cast<Parameters<Cast<NotNull<T[Cast<`on${N}`, keyof T>]>, Func>>[0], Event>;\n\n\nexport function listenEventAsync<T extends EventTarget, N extends Parameters<T['addEventListener']>[0]>(target: T, name: N, options: Omit<AddEventListenerOptions, 'once'> | boolean = {}) {\n    return new Promise<InferEventType<T, N>>(resolve => {\n        const opts = typeof options === 'boolean' ? { capture: options } : options;\n        target.addEventListener(name, p => resolve(p as any), { ...opts, once: true });\n    });\n}\n"]}