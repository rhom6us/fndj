{"version":3,"file":"setTimeoutAsync.js","sourceRoot":"","sources":["../src/setTimeoutAsync.ts"],"names":[],"mappings":"AAQA,MAAM,UAAU,eAAe,CAAC,OAAe,EAAE,GAAG,IAAS;IACzD,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;IAC9B,MAAM,MAAM,GAAG,KAAK,YAAY,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;IAChE,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAEpC,IAAI,eAAe,IAAI,UAAU,EAAE;QAC/B,OAAQ,UAAkB,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KAC7F;IAED,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACxC,IAAI,KAAU,CAAC;QACf,MAAM,EAAE,gBAAgB,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;YACrC,IAAI,KAAK,EAAE;gBACP,YAAY,CAAC,KAAK,CAAC,CAAC;gBACpB,KAAK,GAAG,SAAS,CAAC;aACrB;YACD,MAAM,CAAC,WAAW,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;IACvF,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["\n\nexport function setTimeoutAsync(timeout: number): Promise<void>;\nexport function setTimeoutAsync(timeout: number, signal: AbortSignal): Promise<void>;\nexport function setTimeoutAsync<T>(timeout: number, arg: T): Promise<T>;\nexport function setTimeoutAsync<T>(timeout: number, signal: AbortSignal, arg: T): Promise<T>;\nexport function setTimeoutAsync<T extends any[]>(timeout: number, ...args: T): Promise<T>;\nexport function setTimeoutAsync<T extends any[]>(timeout: number, signal: AbortSignal, ...args: T): Promise<T>;\nexport function setTimeoutAsync(timeout: number, ...args: any) {\n    const [first, ...rest] = args;\n    const signal = first instanceof AbortSignal ? first : undefined;\n    const params = signal ? rest : args;\n\n    if ('__promisify__' in setTimeout) {\n        return (setTimeout as any).__promisify__(timeout, params.length === 1 ? params[0] : args);\n    }\n\n    return new Promise<any>((resolve, reject) => {\n        let token: any;\n        signal?.addEventListener('abort', (ev) => {\n            if (token) {\n                clearTimeout(token);\n                token = undefined;\n            }\n            reject('cancelled');\n        });\n        token = setTimeout(() => resolve(params.length === 1 ? params[0] : args), timeout);\n    });\n}"]}