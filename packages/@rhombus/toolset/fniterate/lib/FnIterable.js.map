{"version":3,"file":"FnIterable.js","sourceRoot":"","sources":["../src/FnIterable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAGtF,MAAM,OAAO,UAAU;IAEU;IAA7B,YAA6B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IACtD,MAAM,CAAC,IAAI,CAAI,MAAmB;QAC9B,OAAO,IAAI,IAAI,CAAI,MAAM,CAAC,CAAC;IAC/B,CAAC;IACD,CAAC,MAAM,CAAC,QAAQ,CAAC;QACb,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjE,CAAC;IAED,KAAK,CAAC,SAAiD;QACnD,OAAO,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAClC,CAAC;IACD,cAAc,CAAgB,SAAkE;QAC5F,OAAO,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC;IACD,MAAM,CAAC,SAAgD;QACnD,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;IACnD,CAAC;IACD,GAAG,CAAI,QAAyC;QAC5C,OAAO,IAAI,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC/C,CAAC;IACD,OAAO,CAAI,QAAmD;QAC1D,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,IAAI,CAAC,KAAa;QACd,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC;IACD,IAAI,CAAC,KAAa;QACd,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC;CAKJ","sourcesContent":["import { CountingIterator } from './CountingIterator';\r\nimport { filter, map, flatMap, take, skip, first, firstOrDefault } from './iterables';\r\n\r\n\r\nexport class FnIterable<V> implements Iterable<V> {\r\n\r\n    constructor(private readonly _source: Iterable<V>) { }\r\n    static from<V>(source: Iterable<V>) {\r\n        return new this<V>(source);\r\n    }\r\n    [Symbol.iterator](): Iterator<V, any, undefined> {\r\n        return new CountingIterator(this._source[Symbol.iterator]());\r\n    }\r\n\r\n    first(predicate?: (source: V, index: number) => boolean): V {\r\n        return first(this, predicate);\r\n    }\r\n    firstOrDefault<D = undefined>(predicate?: (source: V, defaultValue: D, index: number) => boolean) {\r\n        return firstOrDefault(this, predicate);\r\n    }\r\n    filter(predicate: (source: V, index: number) => boolean): Iterable<V> {\r\n        return new FnIterable(filter(this, predicate));\r\n    }\r\n    map<R>(selector: (source: V, index: number) => R) {\r\n        return new FnIterable(map(this, selector));\r\n    }\r\n    flatMap<R>(selector: (source: V, index: number) => Iterable<R>) {\r\n        return new FnIterable(flatMap(this, selector));\r\n    }\r\n\r\n    take(count: number) {\r\n        return new FnIterable(take(this, count));\r\n    }\r\n    skip(count: number) {\r\n        return new FnIterable(skip(this, count));\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n"]}