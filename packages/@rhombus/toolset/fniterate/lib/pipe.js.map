{"version":3,"file":"pipe.js","sourceRoot":"","sources":["../src/pipe.ts"],"names":[],"mappings":"AAuEA,MAAM,SAAS,CAAC,CAAC,IAAI,CAAC,MAAqB,EAAE,GAAG,IAA4B;IACxE,4EAA4E;IAE5E,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;QACrB,KAAK,MAAM,EAAE,IAAI,IAAI,EAAE;YACnB,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;SACnB;QACD,MAAM,IAAI,CAAC;KACd;AAGL,CAAC;AAuBD,SAAS,EAAE,CAAO,EAAwC;IACtD,OAAO,EAAE,CAAC;AACd,CAAC;AAED,MAAM,UAAU,MAAM,CAAU,SAA8D;IAC1F,OAAO;QACH,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO;YACjB,KAAK,CAAC,CAAC,IAAI,CAAC;YACZ,IAAI,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE;gBACxC,MAAM,OAAO,CAAC;aACjB;QACL,CAAC;KACJ,CAAC;IACF,mDAAmD;IACnD,mCAAmC;IACnC,8CAA8C;IAC9C,0BAA0B;IAC1B,YAAY;IACZ,QAAQ;IACR,KAAK;IACL,iDAAiD;IACjD,mCAAmC;IACnC,8CAA8C;IAC9C,0BAA0B;IAC1B,YAAY;IACZ,QAAQ;IACR,KAAK;AACT,CAAC;AACD,MAAM,UAAU,GAAG,CAAmB,QAA6D;IAC/F,OAAO;QACH,GAAG,EAAE,QAAQ;KAChB,CAAC;IACF,iDAAiD;IACjD,mCAAmC;IACnC,6CAA6C;IAC7C,QAAQ;IACR,KAAK;AACT,CAAC;AACD,MAAM,UAAU,KAAK,CAAU,SAAsC;IACjE,OAAO;QACH,MAAM,EAAE,SAAS;QACjB,MAAM,CAAC,CAAC,EAAE,CAAC;YACP,IAAI,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC1B,AAD2B,CAAA;QAC3B,CAAC;KACJ,CAAC;IACF,gDAAgD;IAChD,mCAAmC;IACnC,uDAAuD;IACvD,2BAA2B;IAC3B,YAAY;IACZ,QAAQ;IACR,6DAA6D;IAC7D,KAAK;AACT,CAAC;AACD,MAAM,UAAU,cAAc,CAAU,YAAqB,EAAE,SAAsC;IACjG,OAAO,UAAU,MAAyB;QACtC,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;YACvB,IAAI,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;gBACvC,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,YAAY,CAAC;IACxB,CAAC,CAAC;AACN,CAAC;AACD,MAAM,UAAU,IAAI,CAAU,KAAa;IACvC,OAAO,QAAQ,CAAC,EAAE,MAAyB;QACvC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;SACjC;QACD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;YACvB,MAAM,IAAI,CAAC;YACX,IAAI,EAAE,KAAK,IAAI,KAAK,EAAE;gBAClB,OAAO;aACV;SACJ;IACL,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,KAAK;IACjB,OAAO,UAAU,MAAyB;QACtC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,OAAO,MAAM,CAAC,MAAM,CAAC;SACxB;QACD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QACvC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;YACtB,KAAK,EAAE,CAAC;SACX;QACD,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;AACN,CAAC;AACD,MAAM,UAAU,OAAO;IACnB,OAAO,UAAU,MAAyB;QACtC,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/D,CAAC,CAAC;AACN,CAAC;AAED,SAAS,MAAM,CAAC,SAAkB,EAAE,GAAG,IAAS;IAC5C,sCAAsC;IACtC,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,CAAC;AACvC,CAAC;AACD,MAAM,UAAU,MAAM,CAAU,SAA+D;IAC3F,IAAI,SAAS,EAAE;QACX,OAAO,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;KACxD;IAGD,OAAO,UAAU,MAAyB;QACtC,CAAC;QACD,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC;QAEnB,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAEvC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAC1B,IAAI,KAAK,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,UAAU,CAAC,+BAA+B,CAAC,CAAC;SACzD;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;YACnB,MAAM,IAAI,UAAU,CAAC,yCAAyC,CAAC,CAAC;SACnE;QACD,OAAO,KAAK,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;AACN,CAAC;AACD,MAAM,UAAU,eAAe,CAAU,YAAqB,EAAE,SAAsC;IAClG,MAAM,QAAQ,GAAG,MAAM,CAAU,SAAS,CAAC,CAAC;IAC5C,OAAO,UAAU,MAAyB;QACtC,IAAI;YACA,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC3B;QAAC,OAAO,EAAE,EAAE;YACT,IAAI,EAAE,YAAY,UAAU,EAAE;gBAC1B,OAAO,YAAY,CAAC;aACvB;YACD,MAAM,EAAE,CAAC;SACZ;IACL,CAAC,CAAC;AACN,CAAC;AAED,MAAM,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAEvB,MAAM,MAAM,GAAG,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC","sourcesContent":["import { Func } from '@rhombus/func';\n\n\ntype SelectorChain<T1, T2, T3, T4> = [Func<[T1], T2>, Func<[T2], T3>, Func<[T3], T4>];\n\n\n\ntype MakeSelectorChain<Types extends any[]> =\n    Types extends [infer Source, ...any] ? _MakeSelectorChain<Source, [], Types> : never;\n\ntype _MakeSelectorChain<Source, mapped extends any[], types extends any[]> =\n    types extends [] ? never :\n    types extends [infer result] ? mapped : //(source: Iterable<Source>, ...args: mapped) => Iterable<result> :\n    types extends [infer pop, infer peek, ...infer rest] ? _MakeSelectorChain<Source, [...mapped, (arg: pop) => peek], [peek, ...rest]> :\n    never;\n\n\n\n\n\n// *** GENERATE THE FOLLOWING OVERLOADS WITH THIS CODE ***\n// var nums = nums = Array.from(Array(100).keys());\n// nums.map(i => nums.slice(0, i).map(p => `T${p}`)).map(p => `export function pipe<TSource, ${p.join(`, `)}>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, ${p.join(`, `)}]>): Iterable<${p.reverse()[0]}>;`).join('\\n')\n\nexport function pipe<TSource>(source: Iterable<TSource>): Iterable<TSource>;\nexport function pipe<TSource, T0>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0]>): Iterable<T0>;\nexport function pipe<TSource, T0, T1>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1]>): Iterable<T1>;\nexport function pipe<TSource, T0, T1, T2>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2]>): Iterable<T2>;\nexport function pipe<TSource, T0, T1, T2, T3>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3]>): Iterable<T3>;\nexport function pipe<TSource, T0, T1, T2, T3, T4>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4]>): Iterable<T4>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5]>): Iterable<T5>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6]>): Iterable<T6>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7]>): Iterable<T7>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8]>): Iterable<T8>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]>): Iterable<T9>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>): Iterable<T10>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]>): Iterable<T11>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]>): Iterable<T12>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]>): Iterable<T13>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]>): Iterable<T14>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]>): Iterable<T15>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]>): Iterable<T16>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]>): Iterable<T17>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]>): Iterable<T18>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]>): Iterable<T19>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]>): Iterable<T20>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]>): Iterable<T21>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]>): Iterable<T22>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23]>): Iterable<T23>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24]>): Iterable<T24>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25]>): Iterable<T25>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]>): Iterable<T26>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27]>): Iterable<T27>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28]>): Iterable<T28>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29]>): Iterable<T29>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30]>): Iterable<T30>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31]>): Iterable<T31>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32]>): Iterable<T32>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33]>): Iterable<T33>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34]>): Iterable<T34>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35]>): Iterable<T35>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36]>): Iterable<T36>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37]>): Iterable<T37>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38]>): Iterable<T38>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39]>): Iterable<T39>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40]>): Iterable<T40>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41]>): Iterable<T41>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42]>): Iterable<T42>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43]>): Iterable<T43>;\nexport function pipe<TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44>(source: Iterable<TSource>, ...args: MakeSelectorChain<[TSource, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44]>): Iterable<T44>;\n\nexport function* pipe(source: Iterable<any>, ...args: Array<(p: any) => any>) {\n    // const fn = args.reduce((current, next) => p => next(current(p)), p => p);\n\n    for (let item of source) {\n        for (const fn of args) {\n            item = fn(item);\n        }\n        yield item;\n    }\n\n\n}\n// export function pipe<TSource>(source: TSource): Iterable<TSource>;\n// export function pipe<TSource, T1>(source: TSource, selector1: Func<[TSource], T1>): T1;\n// export function pipe<TSource, T1, T2>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>): T2;\n// export function pipe<TSource, T1, T2, T3>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>, selector3: Func<[T2], T3>): T3;\n// export function pipe<TSource, T1, T2, T3, T4>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>, selector3: Func<[T2], T3>, selector4: Func<[T3], T4>): T4;\n// export function pipe<TSource, T1, T2, T3, T4, T5>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>, selector3: Func<[T2], T3>, selector4: Func<[T3], T4>, selector5: Func<[T4], T5>): T5;\n// export function pipe<TSource, T1, T2, T3, T4, T5, T6>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>, selector3: Func<[T2], T3>, selector4: Func<[T3], T4>, selector5: Func<[T4], T5>, selector6: Func<[T5], T6>): T6;\n// export function pipe<TSource, T1, T2, T3, T4, T5, T6, T7>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>, selector3: Func<[T2], T3>, selector4: Func<[T3], T4>, selector5: Func<[T4], T5>, selector6: Func<[T5], T6>, selector7: Func<[T6], T7>): T7;\n// export function pipe<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>, selector3: Func<[T2], T3>, selector4: Func<[T3], T4>, selector5: Func<[T4], T5>, selector6: Func<[T5], T6>, selector7: Func<[T6], T7>, selector8: Func<[T7], T8>): T8;\n// export function pipe<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(source: TSource, selector1: Func<[TSource], T1>, selector2: Func<[T1], T2>, selector3: Func<[T2], T3>, selector4: Func<[T3], T4>, selector5: Func<[T4], T5>, selector6: Func<[T5], T6>, selector7: Func<[T6], T7>, selector8: Func<[T7], T8>, selector9: Func<[T8], T9>): T9;\n// export function* pipe(source: Iterable<any>, ...selectors: Array<(arg: any) => any>) {\n//     for (const item of source) {\n//         yield selectors.reduce((seed, current) => current(seed), item);\n//     }\n// }\ninterface Operator<T, R = Iterable<T>> {\n\n    map?: (this: Iterable<T>, p: T) => R;\n    reduce?: (this: Iterable<T>, seed: R, current: T) => R;\n\n}\n\nfunction op<T, R>(fn: (source: Iterable<T>) => Iterable<R>) {\n    return fn;\n}\n\nexport function filter<TSource>(predicate: (this: Iterable<TSource>, item: TSource) => boolean): Operator<TSource> {\n    return {\n        *reduce(seed, current) {\n            yield* seed;\n            if (predicate?.call(this, current) ?? true) {\n                yield current;\n            }\n        }\n    };\n    // return op<TSource, TSource>(function* (source) {\n    //     for (const item of source) {\n    //         if (predicate.call(source, item)) {\n    //             yield item;\n    //         }\n    //     }\n    // })\n    // return function* (source: Iterable<TSource>) {\n    //     for (const item of source) {\n    //         if (predicate.call(source, item)) {\n    //             yield item;\n    //         }\n    //     }\n    // };\n}\nexport function map<TSource, TResult>(selector: (this: Iterable<TSource>, item: TSource) => TResult): Operator<TSource, TResult> {\n    return {\n        map: selector\n    };\n    // return function* (source: Iterable<TSource>) {\n    //     for (const item of source) {\n    //         yield selector.call(source, item);\n    //     }\n    // };\n}\nexport function first<TSource>(predicate?: (item: TSource) => boolean): Operator<TSource> {\n    return {\n        filter: predicate,\n        reduce(a, b) {\n            if (predicate?.call(a))\n        }\n    };\n    // return function (source: Iterable<TSource>) {\n    //     for (const item of source) {\n    //         if (predicate?.call(source, item) ?? true) {\n    //             return item;\n    //         }\n    //     }\n    //     throw new RangeError(\"Sequence contains no elements\");\n    // };\n}\nexport function firstOrDefault<TSource>(defaultValue: TSource, predicate?: (item: TSource) => boolean) {\n    return function (source: Iterable<TSource>) {\n        for (const item of source) {\n            if (predicate?.call(source, item) ?? true) {\n                return item;\n            }\n        }\n        return defaultValue;\n    };\n}\nexport function take<TSource>(count: number) {\n    return function* (source: Iterable<TSource>): Iterable<TSource> {\n        if (Array.isArray(source)) {\n            return source.slice(0, count);\n        }\n        let taken = 0;\n        for (const item of source) {\n            yield item;\n            if (++taken >= count) {\n                return;\n            }\n        }\n    };\n}\n\nexport function count<TSource>() {\n    return function (source: Iterable<TSource>): number {\n        if (Array.isArray(source)) {\n            return source.length;\n        }\n        let count = 0;\n        const iter = source[Symbol.iterator]();\n        while (!iter.next().done) {\n            count++;\n        }\n        return count;\n    };\n}\nexport function toArray<TSource>() {\n    return function (source: Iterable<TSource>): TSource[] {\n        return Array.isArray(source) ? source : Array.from(source);\n    };\n}\n\nfunction assert(condition: boolean, ...data: any) {\n    // eslint-disable-next-line no-console\n    console.assert(condition, ...data);\n}\nexport function single<TSource>(predicate?: (this: Iterable<TSource>, item: TSource) => boolean): Func<[Iterable<TSource>], TSource> {\n    if (predicate) {\n        return src => pipe(src, filter(predicate), single());\n    }\n\n\n    return function (source: Iterable<TSource>): TSource {\n        ;\n        assert(!predicate);\n\n        const iter = source[Symbol.iterator]();\n\n        const first = iter.next();\n        if (first.done) {\n            throw new RangeError(\"Sequence contains no elements\");\n        }\n        if (!iter.next().done) {\n            throw new RangeError(\"Sequence contains more than one element\");\n        }\n        return first.value;\n    };\n}\nexport function singleOrDefault<TSource>(defaultValue: TSource, predicate?: (item: TSource) => boolean) {\n    const singleFn = single<TSource>(predicate);\n    return function (source: Iterable<TSource>): TSource {\n        try {\n            return singleFn(source);\n        } catch (ex) {\n            if (ex instanceof RangeError) {\n                return defaultValue;\n            }\n            throw ex;\n        }\n    };\n}\n\nconst etst = [1, 2, 3];\n\nconst result = pp(etst, first());\n"]}