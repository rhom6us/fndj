{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["\nexport interface FetchEventMap {\n  \"progress\": ProgressEvent;\n  \"complete\": ProgressEvent;\n}\nexport interface ProgressEventTarget extends EventTarget {\n  addEventListener<K extends keyof FetchEventMap>(type: K, listener: (this: ProgressEventTarget, ev: FetchEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener<K extends keyof FetchEventMap>(type: K, listener: (this: ProgressEventTarget, ev: FetchEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\nexport function wrapResponse(response: Response) {\n\n  if (!response.body) {\n    throw Error('ReadableStream not yet supported in this browser.');\n  }\n\n  if (!response.ok) {\n    throw Error(response.status + ' ' + response.statusText);\n  }\n\n\n  // to access headers, server must send CORS header \"Access-Control-Expose-Headers: content-encoding, content-length x-file-size\"\n  // server must send custom x-file-size header if gzip or other content-encoding is used\n  const contentEncoding = response.headers.get('content-encoding');\n  const contentLength = response.headers.get(contentEncoding ? 'x-file-size' : 'content-length');\n  if (contentLength === null) {\n    // don't evaluate download progress if we can't compare against a total size\n    throw Error('Response size header unavailable');\n  }\n\n  const total = parseInt(contentLength, 10);\n  let loaded = 0;\n\n  const lengthComputable = !!total;\n\n  const emitter: ProgressEventTarget = new EventTarget();\n  function progress(amount: number) {\n    loaded += amount;\n    emitter.dispatchEvent(new ProgressEvent('progress', { lengthComputable, loaded, total }));\n  }\n  function complete() {\n    progress(total - loaded);\n    emitter.dispatchEvent(new ProgressEvent('complete', { lengthComputable, loaded, total }));\n  }\n  const reader = response.body!.getReader();\n  let cancelled = false;\n\n  const stream = new ReadableStream({\n    async start(controller) {\n      if (cancelled) {\n        controller.close();\n        return;\n      }\n      // void async function pushit() {\n      try {\n        while (true) { // eslint-disable-line no-constant-condition\n          const { done, value } = await reader.read();\n          if (done) {\n            controller.close();\n            break;\n          }\n          progress(value!.byteLength);\n          controller.enqueue(value);\n        }\n        complete();\n      } catch (error) {\n        controller.error(error);\n      }\n      // }();\n\n    },\n  });\n  const result = new Response(stream, response);\n  result.progress = emitter;\n  result.cancel = () => {\n    cancelled = true;\n    emitter.dispatchEvent(new ProgressEvent('cancelled', { lengthComputable, loaded, total }));\n    return reader?.cancel() ?? Promise.resolve();\n  };\n  return result;\n  // return obj.assignDeep(new Response(stream, response), emitter);\n\n}\n\n\ndeclare global {\n  interface Response /*extends ProgressEventTarget*/ {\n    progress: ProgressEventTarget;\n    cancel(): Promise<void>;\n  }\n}\nexport const nativeFetch = globalThis.fetch;\nglobalThis.fetch = function (...args: Parameters<typeof fetch>) {\n  return nativeFetch.apply(this, args).then(wrapResponse);\n};\n"]}