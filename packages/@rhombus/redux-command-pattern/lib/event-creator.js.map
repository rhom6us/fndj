{"version":3,"file":"event-creator.js","sourceRoot":"","sources":["../src/event-creator.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0D,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAY1G,MAAM,UAAU,eAAe,CAAqD,QAAmB,EAAE,SAAmB,EAAE;IAC5H,MAAM,MAAM,GAAQ,EAAE,CAAC;IACvB,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;QAClC,MAAM,CAAC,QAAQ,CAAC,GAAG,mCAAmC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAE,CAAC;QAC3I,MAAM,CAAC,EAAE,GAAG,eAAe,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEtD,OAAO,UAAU,GAAG,IAAW;YAC7B,OAAO;gBACL,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBAC3B,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC;aACzB,CAAC;QACJ,CAAQ,CAAC;QAET,8FAA8F;QAC9F,4CAA4C;QAC5C,eAAe;QACf,qCAAqC;QACrC,kEAAkE;QAClE,iBAAiB;KAClB;IACD,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;QAC1B,MAAM,CAAC,GAAG,CAAC,GAAG,eAAe,CAAE,QAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;KACzE;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { Cast, DeepDictionary, DeepDictionaryItem, Inc, restify, unrestify } from '@rhombus/type-helpers';\nimport { InferPayload, ReducerFnAny } from './reducer-fn';\nimport { StandardEvent } from './standard-event';\n\ntype EventCreator<TReducerFn extends ReducerFnAny, Name extends string> = (...payload: restify<InferPayload<TReducerFn>>) => StandardEvent<InferPayload<TReducerFn>, Name>;\n\nexport type EventCreatorOrMap<TReducerFnOrMap extends DeepDictionaryItem<ReducerFnAny>, NameAcc extends string = ''> =\n  TReducerFnOrMap extends ReducerFnAny ? EventCreator<TReducerFnOrMap, NameAcc> :\n  TReducerFnOrMap extends DeepDictionary<ReducerFnAny> ? {\n    [K in keyof TReducerFnOrMap]: EventCreatorOrMap<TReducerFnOrMap[K], NameAcc extends '' ? K : `${NameAcc}.${Cast<K, string>}`>;\n  } :\n  never;\nexport function getEventCreator<TReducers extends DeepDictionaryItem<ReducerFnAny>>(reducers: TReducers, prefix: string[] = []): EventCreatorOrMap<TReducers> {\n  const result: any = {};\n  if (typeof reducers === 'function') {\n    const [argNames] = /(?<=^\\w+\\()((?:\\w+,)*\\w+,?)(?=\\))/.exec(reducers.toString().replace(/[\\r\\n\\s]+/g, '').replace(/^function(?=\\w)/, ''))!;\n    const [, ...payloadArgNames] = argNames.split(/,\\s*/);\n\n    return function (...args: any[]) {\n      return {\n        type: `${prefix.join('.')}`,\n        payload: unrestify(args),\n      };\n    } as any;\n    \n    // we do it this way so that the redux devtools 'dispatch' feature can read the argument names\n    // return new Function(...payloadArgNames, `\n    //     return {\n    //       type: '${prefix.join('.')}',\n    //       payload: (${unrestify.toString()})(Array.from(arguments))\n    //   };`) as any;\n  }\n  for (const key in reducers) {\n    result[key] = getEventCreator((reducers as any)[key], [...prefix, key]);\n  }\n  return result;\n}\n\n// function defaultFn() {}\n// export function getEventCreator<TReducers extends DeepDictionaryItem<ReducerFnAny>>(type?: string): EventCreatorOrMap<TReducers> {\n//   return new Proxy(defaultFn, {\n//     get(target, prop) {\n//       const ns = [type, prop].filter(Boolean).join('.');\n//       return getEventCreator<TReducers>(ns);\n//     },\n//     apply(target, thisArg, payload) {\n//       return {\n//         type,\n//         payload,\n//       };\n//     },\n//   }) as EventCreatorOrMap<TReducers>;\n// }\n\n\nexport type EventTypes<TReducerFnOrMap extends DeepDictionaryItem<ReducerFnAny>, MaxDepth extends number = 5, NameAcc extends string = '', CurrentDepth extends number = 0> =\n  CurrentDepth extends MaxDepth ? never :\n  TReducerFnOrMap extends ReducerFnAny ? StandardEvent<InferPayload<TReducerFnOrMap>, NameAcc> :\n  TReducerFnOrMap extends DeepDictionary<ReducerFnAny> ? {\n    [K in keyof TReducerFnOrMap]: EventTypes<TReducerFnOrMap[K], MaxDepth, NameAcc extends '' ? K : `${NameAcc}.${Cast<K, string>}`, Inc<CurrentDepth>>;\n  }[keyof TReducerFnOrMap] :\n  never;\n"]}