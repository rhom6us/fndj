{"version":3,"file":"get-commands.js","sourceRoot":"","sources":["../src/get-commands.ts"],"names":[],"mappings":"AACA,OAAO,EAAW,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAa3D,MAAM,SAAS,GAAG,cAAc,CAAQ,CAAC;AAEzC;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,WAAW,GAKtB,SAAS,YAAY,CAAuB,OAA2B,EAAE,IAAa;IACpF,OAAO,IAAI,KAAK,CAAC,SAAS,EAAE;QAC1B,GAAG,CAAC,MAAM,EAAE,IAAI;YACd,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClD,OAAO,YAAY,CAAI,OAAO,EAAE,EAAE,CAAC,CAAC;QACtC,CAAC;QACD,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,OAAW;YAChC,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;aAC9D;YACD,MAAM,GAAG,GAAuC;gBAC9C,IAAI;gBACJ,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC;aAC5B,CAAC;YACF,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;YACf,OAAO,GAAG,CAAC;QACb,CAAC;KACF,CAAyB,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import { Func } from '@rhombus/func';\nimport { restify, unrestify } from '@rhombus/type-helpers';\nimport { CommandFnAny, CommandHandler, CommandMap, InferPayload as CommandPayload } from './create-command-handler';\nimport { StandardCommand } from './standard-command';\nimport { DeepDictionary, DeepDictionaryItem } from './utils';\n\n\ntype CommandCreatorMap<T extends DeepDictionary<CommandFnAny>, OverrideReturn = never> = {\n  [K in keyof T]: CommandCreatorOrMap<T[K], OverrideReturn>;\n};\ntype CommandCreatorOrMap<T extends DeepDictionaryItem<CommandFnAny>, OverrideReturn = never> =\n  T extends CommandFnAny ? Func<[...payload:restify<CommandPayload<T>>], OverrideReturn extends never ? StandardCommand<CommandPayload<T>> : OverrideReturn> :\n  T extends Record<string, any> ? CommandCreatorMap<T, OverrideReturn> :\n  never;\nconst defaultFn = function () { } as any;\n\n/**\n * This function takes a map of command implementations and returns a maching map\n * of command creator functions.\n *\n * It also optionally accepts an invoker to auto-invoke commands as they are created.\n *\n * @returns \\{[command-name]: (payload) => handler(new StandardCommand(command-name, payload))\\}\n */\nexport const getCommands: {\n  <T extends CommandMap>(): CommandCreatorOrMap<T>;\n  <T extends CommandMap>(handler: CommandHandler<T>): CommandCreatorOrMap<T, void>;\n} =\n\n  function _getCommands<T extends CommandMap>(invoker?: CommandHandler<T>, type?: string): CommandCreatorMap<T> {\n    return new Proxy(defaultFn, {\n      get(target, prop) {\n        const ns = [type, prop].filter(Boolean).join('.');\n        return _getCommands<T>(invoker, ns);\n      },\n      apply(target, thisArg, payload:any) {\n        if (!type) {\n          throw new Error('Cannot invoke the root command map object');\n        }\n        const cmd: StandardCommand<CommandPayload<T>> = {\n          type,\n          payload: unrestify(payload)\n        };\n        invoker?.(cmd);\n        return cmd;\n      },\n    }) as CommandCreatorMap<T>;\n  };\n"]}