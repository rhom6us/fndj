{"version":3,"file":"create-command-handler.js","sourceRoot":"","sources":["../src/create-command-handler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n *\n * Accepts a standard-command, looks up its implementation, invokes it, and handlees the resulting events to the store.\n * @param store\n * @param implementation {[command-name]: (state, payload)=>events}\n * @returns This is like a reducer for command objects\n */\nimport { AsyncAction, Func } from '@rhombus/func';\nimport { assertNever, isAsyncGenerator, isAsyncIterable, isGenerator, isIterable, isPromiseLike } from '@rhombus/type-guards';\nimport { Await, restify } from '@rhombus/type-helpers';\nimport { StandardCommand } from './standard-command';\nimport { isStandardEvent, StandardEventAny } from './standard-event';\nimport { Store } from './store';\nimport { AnyTypeOf, DeepDictionary, DeepDictionaryItem, flattenMap, isObservable, isThunk, Observable, Thunk } from './utils';\n\n\nexport type CommandFn<TState, TPayload, TEvents extends StandardEventAny> =\n  (state: TState, ...payload: restify<TPayload>) => CommandResult<TState, TEvents>;// | PromiseLike<CommandResult<TState>>\n\n\nexport type CommandFnAny = CommandFn<any, any, any>;\n\nexport type CommandGenerator<TState, TEvent extends StandardEventAny=StandardEventAny> = Generator<CommandResult<TState, TEvent>, CommandResult<TState, TEvent> | void, TState>;\nexport type AsyncCommandGenerator<TState, TEvent extends StandardEventAny=StandardEventAny> = AsyncGenerator<CommandResult<TState, TEvent>, CommandResult<TState, TEvent> | void, TState>;\nexport type CommandResult<TState = any, TEvent extends StandardEventAny = StandardEventAny> = AnyTypeOf<TEvent, TState>;\n\n\nexport type CommandMap<S = any, P = any, E extends StandardEventAny = StandardEventAny> = DeepDictionary<CommandFn<S, P, E>>;\nexport type CommandFnOrMap = DeepDictionaryItem<CommandFnAny>;\ntype InferState<T extends CommandFnOrMap> = T extends DeepDictionaryItem<CommandFn<infer TState, any, any>>\n  ? TState\n  : never;\ntype InferEvents<T extends CommandFnOrMap> = T extends DeepDictionaryItem<CommandFn<any, any, infer TEvents>>\n  ? TEvents\n  : never;\n\nexport type InferPayload<T extends CommandFnOrMap> =\n  T extends Func<[any, ...infer TPayload], any> ? TPayload :\n  // T extends CommandFn<any, infer TPayload, any> ? TPayload :\n  T extends DeepDictionary<CommandFnAny> ? {\n    [K in keyof T]: InferPayload<T[K]>\n  }[keyof T] :\n  never;\n\n\n\n\n\nexport type InferStore<T extends DeepDictionaryItem<CommandFnAny>> = Store<InferState<T>, InferEvents<T>>;\n\nconst DEFAULT_SIGNAL: AbortSignal = Object.freeze({\n  aborted: false,\n  onabort() { throw 'DEFAULT_SIGNAL cannot be aborted'; },\n  addEventListener() { },\n  dispatchEvent(): boolean {\n    return false;\n  },\n  removeEventListener() { }\n});\n\nexport type CommandHandler<T extends DeepDictionaryItem<CommandFnAny>> = AsyncAction<[commandObject: StandardCommand<InferPayload<T>>, signal?: AbortSignal]>;\n\nexport function createCommandHandler<T extends DeepDictionary<CommandFnAny>>(store: Store, implementation: T): CommandHandler<T> {\n  const flatMap: any = flattenMap(implementation);\n  return function handleCommand({ type, payload }, signal = DEFAULT_SIGNAL) {\n\n    if (!(type in flatMap)) {\n      return Promise.reject(`Command \"${type}\" not found`);\n    }\n    if (signal.aborted) {\n      return Promise.reject('cancelled');\n    }\n    const events = flatMap[type](store.getState(), ...restify(payload));\n    return handle(events, store, signal);\n\n  };\n}\nasync function handle(result: CommandResult, store: Store, signal: AbortSignal): Promise<void> {\n  // await setImmediateAsync();\n  if (!result) {\n    return;\n  }\n  if (isStandardEvent(result)) {\n    store.dispatch(result);\n    return;\n  }\n  if (isThunk(result)) {\n    return handleThunk(result, store, signal);\n  }\n  if (isPromiseLike(result)) {\n    return handlePromiseLike(result, store, signal);\n  }\n  if (isObservable(result)) {\n    return handleObservable(result, store, signal);\n  }\n  if (isGenerator(result) || isAsyncGenerator(result)) { // this MUST happen before the 'isIterable()' check\n    return handleGenerator(result, store, signal);\n  }\n  if (isIterable(result) || isAsyncIterable(result)) {\n    return handleIterable(result, store, signal);\n  }\n\n  return assertNever(result);\n}\n\n\nasync function handleThunk(thunk: Thunk<CommandResult<any, StandardEventAny>>, store: Store, signal: AbortSignal) {\n  return new Promise<void>(resolve => {\n    thunk(async (value) => {\n      await handle(value, store, signal);\n      resolve();\n    });\n  });\n}\n\nasync function handlePromiseLike(value: PromiseLike<CommandResult<any, any>>, store: Store, signal: AbortSignal) {\n  return handle(await value, store, signal);\n}\n\nasync function handleObservable(obs: Observable<CommandResult<any, any>>, store: Store, signal: AbortSignal) {\n  const handler = (value: CommandResult<any, any>) => handle(value, store, signal);\n  const sub = obs.subscribe({ onNext: handler, next: handler });\n  signal.addEventListener('abort', () => sub.unsubscribe());\n}\n\nasync function handleGenerator(iter: CommandGenerator<any, any> | AsyncCommandGenerator<any, any>, store: Store, signal: AbortSignal): Promise<void> {\n  let current: Await<ReturnType<typeof iter.next>>;// = await iter.next(store.getState());\n  do {\n    current = await iter.next(store.getState());\n    if (current.value) {\n      await handle(current.value, store, signal);\n    }\n  } while (!current.done && !signal.aborted);\n}\n\nasync function handleIterable(value: Iterable<CommandResult<any, any>> | AsyncIterable<CommandResult<any, any>>, store: Store, signal: AbortSignal) {\n  // we do NOT check for abort here because the assumption is that once an event is returned/yielded,\n  // that event WILL be processed. We can't do that here because value might be an array. The value\n  // parameter is defenitely not a generator function with 'yield' statements because we checked for\n  // that earlier in the general 'handle' function above.\n  for await (const item of value) {\n    await handle(item, store, signal);\n  }\n}\n"]}