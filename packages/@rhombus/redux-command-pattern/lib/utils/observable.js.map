{"version":3,"file":"observable.js","sourceRoot":"","sources":["../../src/utils/observable.ts"],"names":[],"mappings":"AA2BC,CAAC;AAEF,MAAM,UAAU,YAAY,CAAC,KAAU;IACrC,OAAO,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC;AACpC,CAAC","sourcesContent":["import { Action, Func } from '@rhombus/func';\n\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: unique symbol;\n  }\n}\n\nexport type Observer<T> = { onNext:Action<[T]>; } | { next:Action<[T]>; }\nexport type Unsubscribe = Action<[]>;\n\n/**\n * A minimal observable of state changes.\n * For more information, see the observable proposal:\n * https://github.com/tc39/proposal-observable\n */\nexport interface Observable<T> {\n  /**\n   * The minimal observable subscription method.\n   * @param {Object} observer Any object that can be used as an observer.\n   * The observer object should have a `next` method.\n   * @returns {subscription} An object with an `unsubscribe` method that can\n   * be used to unsubscribe the observable from the store, and prevent further\n   * emission of values from the observable.\n   */\n  subscribe: Func<[Observer<T>], {unsubscribe: Unsubscribe}>;\n  [Symbol.observable](): Observable<T>;\n};\n\nexport function isObservable(value: any): value is Observable<any>{\n  return Symbol.observable in value;\n}\n"]}