{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAa,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAC3E,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAc,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAC9D,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAQ7C,OAAO,EAAE,oBAAoB,EAAE,CAAC;AAEhC,MAAM,UAAU,aAAa,CAAiD,QAAmB;IAC7F,MAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;IAAA,CAAC;IAC3C,OAAO,CAAC,OAAO,EAAE,MAAM,CAAU,CAAC;AACtC,CAAC;AACD,MAAM,UAAU,aAAa,CAA4J,cAAyB,EAAE,KAAY,EAAE,QAAoB;IAClP,MAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAC5D,MAAM,QAAQ,GAAG,WAAW,CAAY,OAAO,CAAC,CAAC;IACjD,OAAO,QAAQ,CAAC;AACpB,CAAC;AAGD,6GAA6G;AAC7G,uGAAuG;AACvG,kFAAkF;AAClF,wCAAwC;AACxC,IAAI","sourcesContent":["import { DeepDictionary, DeepDictionaryItem } from '@rhombus/type-helpers';\nimport { CommandFn, createCommandHandler } from './create-command-handler';\nimport { createReducer } from './createReducer';\nimport { EventTypes, getEventCreator } from './event-creator';\nimport { getCommands } from './get-commands';\nimport { ReducerFn, ReducerFnAny } from './reducer-fn';\nimport { Store } from './store';\n\nexport type { AsyncCommandGenerator, CommandGenerator, CommandResult } from './create-command-handler';\nexport type { StandardEvent, StandardEventAny } from './standard-event';\nexport type { ThunkDispatch } from './utils';\nexport type { ReducerFn, CommandFn };\nexport { createCommandHandler };\n\nexport function parseReducers<TReducers extends DeepDictionary<ReducerFnAny>>(reducers: TReducers) {\n    const reducer = createReducer(reducers);\n     const events = getEventCreator(reducers);;\n    return [reducer, events] as const;\n}\nexport function parseCommands<TReducers extends DeepDictionaryItem<ReducerFnAny>, TCommands extends DeepDictionary<CommandFn</*InferState<TReducers>*/any, any, EventTypes<TReducers>>>>(implementation: TCommands, store: Store, reducers?: TReducers) {\n    const handler = createCommandHandler(store, implementation);\n    const commands = getCommands<TCommands>(handler);\n    return commands;\n}\n\n\n// export function getCommandParsers<Commands extends DeepDictionary<CommandFnAny>>(implementation:Commands){\n//     const getHandler = (store: InferStore<Commands>) => createCommandHandler(store, implementation);\n//     const gc = (handler:ReturnType<typeof getHandler>) => getCommands(handler);\n//     return [getHandler, gc] as const;\n// }\n"]}