{"version":3,"file":"createReducer.js","sourceRoot":"","sources":["../src/createReducer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,UAAU,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAM5E,MAAM,UAAU,aAAa,CAAyC,QAAW;IAE/E,MAAM,OAAO,GAAQ,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC1C,OAAO,SAAS,aAAa,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;QACpD,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,MAAM,IAAI,SAAS,CAAC,8FAA8F,CAAC,CAAC;SACrH;QACD,IAAI,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,EAAE;YACtB,sCAAsC;YACtC,OAAO,CAAC,IAAI,CAAC,iCAAiC,IAAI,EAAE,CAAC,CAAC;YACtD,OAAO,KAAK,CAAC;SACd;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,OAAc,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { DeepDictionary, flattenMap, restify } from '@rhombus/type-helpers';\nimport { EventTypes } from './event-creator';\nimport { Reducer as ReduxReducer } from './external/redux';\nimport { ReducerFnAny } from './reducer-fn';\n\n\nexport function createReducer<T extends DeepDictionary<ReducerFnAny>>(reducers: T): ReduxReducer</*InferState<T>*/any, EventTypes<T>> {\n\n  const flatMap: any = flattenMap(reducers);\n  return function rootReducerfn(state, { type, payload }) {\n    if (state === undefined) {\n      throw new TypeError('redux-command-pattern does not support undefined state. Please preload with an initial state');\n    }\n    if (!(type in flatMap)) {\n      // eslint-disable-next-line no-console\n      console.warn(`reducer not found for action: ${type}`);\n      return state;\n    }\n    return flatMap[type](state, ...restify(payload as any));\n  };\n}\n"]}